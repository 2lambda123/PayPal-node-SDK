// This class was generated on Tue, 05 Dec 2017 14:33:37 PST by version 0.1 of Braintree SDK Generator
// invoiceGetRequest.js
// @version 0.1
// @type request
// @data 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
// DO NOT EDIT
'use strict';

const querystring = require('querystring');
/**
 Shows details for an invoice, by ID.
 **/

class InvoiceGetRequest {

  constructor(invoiceId) {
    this.path = '/v1/invoicing/invoices/{invoice_id}?';
    this.path = this.path.replace("{invoice_id}", querystring.escape(invoiceId));
    this.verb = 'GET';
    this.body = null;
    this.headers = {
        'Content-Type': 'application/json'
        };
  }
}

module.exports = {InvoiceGetRequest: InvoiceGetRequest};
